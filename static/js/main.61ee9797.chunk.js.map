{"version":3,"sources":["Button.jsx","App.js","index.js"],"names":["Button","document","addEventListener","event","props","button","buttonFunction","key","toString","this","type","id","onClick","defaultValue","className","React","Component","initialState","display","calculation","App","onNumber","setNumber","target","value","onOperator","setState","state","length","prevState","substring","isNaN","setOperator","eval","test","buttons","temporal","setTimeout","operator","map","i","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.61ee9797.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Button extends React.Component {\r\n    componentDidMount() {\r\n        document.addEventListener('keydown', event => {\r\n            let { button, buttonFunction } = this.props;\r\n            if ( event.key === 'Backspace' && button === '<-' ) { button = 'Backspace' };\r\n            if ( event.key === '*' && button === 'x' ) { button = '*' };\r\n            if ( event.key === 'c' && button === 'C' ) { button = 'c' };\r\n            if ( event.key === 'Enter' && button === '=' ) { button = 'Enter' }\r\n            if ( event.key === button.toString() ) buttonFunction(event) ;\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { button, buttonFunction } = this.props;\r\n        return (\r\n            <input type=\"button\" id={ button } onClick={ buttonFunction }\r\n            defaultValue={ button } className=\"Button\" />\r\n        )\r\n    }\r\n}\r\n\r\nexport default Button;","/* eslint no-eval: 0 */\n//Deshabilitando el eslint para poder usar eval()\n//Es la primera vez que veo que un comentario puede deshabilitar algo\n\nimport React from 'react';\nimport Button from './Button';\n\nconst initialState = {\n    display: '0',\n    calculation: ''\n}\n\nclass App extends React.Component {\n    constructor() {\n        super();\n        this.state = initialState;\n\n        this.buttons = [\n            'C', '<-', '/', 'x', 7, 8, 9, '-', 4, 5, 6,\n            '+', 1, 2, 3, '=', 0, '.'\n        ];\n    }\n\n    setNumber (value) {\n        const { calculation, display } = this.state;\n        this.setState(prevState => {\n            return { calculation: prevState.calculation + value }\n        });\n\n        if(display.length < 12){ //Verificar si el dispaly no esta full\n            \n            isNaN(calculation[calculation.length - 1]) && //isNaN da true si no es un numero\n            calculation[calculation.length - 1] !== 0  &&\n            calculation[calculation.length - 1] !== '.' ? \n            \n            this.setState({ display: value }) :\n            this.setState(prevState => {\n                return { display: prevState.display + value.toString() }\n            });\n        } else {\n            const temporal = display;\n            this.setState({ display: 'Display Full' }, () => setTimeout(() => {\n                this.setState({ display: temporal });\n            }, 2000));\n        }\n    }\n\n    onNumber = event => {\n        if (event.type === 'click') this.setNumber(event.target.value)\n        if (event.key) this.setNumber(event.key)\n    }\n\n    setOperator (operator) {\n        const { calculation, display } = this.state;\n        if ( !isNaN(calculation[calculation.length - 1]) ) {\n            this.setState({ display: eval(calculation).toString() }, () => {\n                //eval() sirve para operar string de operaciones\n                this.setState(prevState => {\n                    return { calculation: eval(prevState.calculation) + operator }\n                });\n            });\n        }else {\n            const temporal = display;\n            this.setState({ display: 'Syntax Error' }, () => setTimeout(() => {\n                this.setState({ display: temporal });\n            }, 2000));\n        }\n    }\n\n    onOperator = {\n        'C': () => this.setState(initialState),\n\n        '<-': () => {\n            const { display, calculation } = this.state;\n            //Primero verificar si hay un numero en el display para borrar el ultimo digito\n            if (display.length > 1) {\n                this.setState(prevState => {\n                    const { display } = prevState;\n                    return { display: display.substring(0, display.length - 1).toString() }\n                }, \n                //Segundo verificar si el ultimo caracter es un numero para borrarlo\n                () => !isNaN(calculation[calculation.length - 1]) ?\n                this.setState(prevState => {\n                    const { calculation } = prevState;\n                    return { calculation: calculation.substring(0, calculation.length - 1) }\n                }) : null)\n            } else { //Para que al borrar el ultimo digito este se quede en 0\n                this.setState(prevState => {\n                    const { calculation } = prevState;\n                    return {\n                        display: '0',\n                        calculation: calculation.substring(0, calculation.length - 1)\n                    }\n                })\n            }\n        },\n\n        '/': () => this.setOperator('/'),\n\n        'x': () => this.setOperator('*'),\n\n        '-': () => this.setOperator('-'),\n\n        '+': () => this.setOperator('+'),\n\n        '=': () => this.setState({ display: eval(this.state.calculation).toString() }, () => {\n            this.setState({ calculation: '' })\n        }),\n\n        '.': () => {\n            const { calculation, display } = this.state;\n            //Regex de . para verificar si ya hay en el display\n            if( !/\\./.test(display) ) {\n                isNaN(calculation[calculation.length - 1]) || display === '0' ?\n                this.setState(prevState => {\n                    return {\n                        display: '0.',\n                        calculation: prevState.calculation + '0.'\n                    }\n                }) : \n                this.setState(prevState => {\n                    return {\n                        display: prevState.display + '.',\n                        calculation: prevState.calculation + '.'\n                    }\n                });\n            }\n        }\n    }\n\n    render() {\n        return(\n            <div id=\"App\">\n                <h1>Simple Calculator</h1>\n                <div className=\"container\" >\n                    <h2>{ this.state.display }</h2>\n                    <div className=\"buttons-container\" >\n                        { this.buttons.map((button, i) => {\n                            return typeof button === 'number' ?\n                            <Button key={ i } buttonFunction={ this.onNumber } button={ button } />:\n                            <Button key={ i } buttonFunction={ this.onOperator[button] } button={ button } />\n                        })}\n                    </div>\n                </div>\n                <div className=\"bottom\" />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}